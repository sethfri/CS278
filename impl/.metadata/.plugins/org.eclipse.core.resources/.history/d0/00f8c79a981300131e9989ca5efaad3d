package org.cs27x.dropbox.test;

import org.cs27x.dropbox.HazelcastTransport;
import org.cs27x.dropbox.DropboxProtocol;
import org.cs27x.filewatcher.DropboxFileEventHandler;
import org.cs27x.filewatcher.FileReactor;

import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import static org.mockito.Mockito.*;

public class DropboxTest {
	
	private HazelcastTransport transport;
	private DropboxProtocol protocol;
	private FileReactor reactor;
	
	private Dropbox dropbox;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		this.transport = mock(HazelcastTransport.class);
		this.protocol = mock(DropboxProtocol.class);
		this.reactor = mock(FileReactor.class);
		
		Path rootPath = 
		this.dropbox = new Dropbox()
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testDropbox() {
		verify(this.reactor).addHandler(any(DropboxFileEventHandler.class));
	}

	@Test
	public void testConnect() {
		String testServer = "testServer";
		
		this.
	}

	@Test
	public void testConnected() {
		fail("Not yet implemented");
	}

	@Test
	public void testDisconnect() {
		fail("Not yet implemented");
	}

	@Test
	public void testAwaitConnect() {
		fail("Not yet implemented");
	}

	@Test
	public void testMain() {
		fail("Not yet implemented");
	}

}
